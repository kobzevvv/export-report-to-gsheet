name: Deploy Cloud Function

on:
  push:
    branches: [ main ]  
    paths:
      - 'cloud_function/**'
      - 'json_unnesting.py'
      - 'requirements.txt'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {} 

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  FUNCTION_NAME: ${{ secrets.FUNCTION_NAME }}
  # Optional: set to true to allow unauthenticated invoke (recommended only if using token)
  ALLOW_UNAUTHENTICATED: ${{ secrets.ALLOW_UNAUTHENTICATED }}
  # Secret Manager secret names to bind at deploy time
  SECRET_NEON_DATABASE_URL: ${{ secrets.SECRET_NEON_DATABASE_URL }}
  SECRET_PUBLIC_TRIGGER_TOKEN: ${{ secrets.SECRET_PUBLIC_TRIGGER_TOKEN }}
  # Fallback: direct env var (GitHub secret)
  NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
  GOOGLE_CLOUD_FUNCTION_URL: ${{ secrets.GOOGLE_CLOUD_FUNCTION_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (JSON key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GBQ_CREDS_JSON }}

      - name: Derive project id from GBQ_CREDS_JSON when not provided
        run: |
          set -euo pipefail
          if [[ -z "${GCP_PROJECT_ID:-}" ]]; then
            echo '${{ secrets.GBQ_CREDS_JSON }}' > /tmp/creds.json
            DERIVED_PROJECT_ID=$(jq -r '.project_id' /tmp/creds.json)
            if [[ -z "$DERIVED_PROJECT_ID" || "$DERIVED_PROJECT_ID" == "null" ]]; then
              echo "Failed to derive project_id from GBQ_CREDS_JSON" >&2
              exit 1
            fi
            echo "GCP_PROJECT_ID=$DERIVED_PROJECT_ID" >> "$GITHUB_ENV"
          fi

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Enable required APIs (idempotent)
        run: |
          set -euo pipefail
          gcloud services enable \
            cloudfunctions.googleapis.com \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            cloudbuild.googleapis.com \
            eventarc.googleapis.com \
            sheets.googleapis.com || true

      - name: Ensure Artifact Registry repo for GCF exists
        run: |
          set -euo pipefail
          REGION=${GCP_REGION:-us-central1}
          REPO=gcf-artifacts
          if ! gcloud artifacts repositories describe ${REPO} --location=${REGION} >/dev/null 2>&1; then
            gcloud artifacts repositories create ${REPO} \
              --repository-format=docker \
              --location=${REGION} \
              --description="GCF build artifacts" || true
          fi

      - name: Grant Cloud Build permissions to Compute Engine default service account
        run: |
          set -euo pipefail
          PROJECT_ID=${GCP_PROJECT_ID}
          PROJECT_NUMBER=${PROJECT_ID%%-*}
          SERVICE_ACCOUNT="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"

          echo "Attempting to grant Cloud Build permissions..."
          # Grant Cloud Build Service Account role to the Compute Engine default service account
          if gcloud projects add-iam-policy-binding ${PROJECT_ID} \
            --member="serviceAccount:${SERVICE_ACCOUNT}" \
            --role="roles/cloudbuild.builds.builder" \
            --quiet; then
            echo "‚úÖ Successfully granted Cloud Build permissions"
          else
            echo "‚ö†Ô∏è  Failed to grant Cloud Build permissions automatically"
            echo "üìù Please run the fix-iam-permissions.sh script manually:"
            echo "   ./fix-iam-permissions.sh"
            echo "   This script will grant the necessary permissions to ${SERVICE_ACCOUNT}"
          fi

      - name: Check and resolve stuck deployments
        run: |
          set -euo pipefail
          REGION=${GCP_REGION:-us-central1}
          NAME=${FUNCTION_NAME:-pg_query_output_to_gsheet}

          echo "üîç Checking for stuck deployments and builds..."

          # Check for existing Cloud Function builds
          BUILDS=$(gcloud builds list --region=${REGION} --filter="status=(WORKING OR QUEUED OR PENDING)" --format="value(id)" 2>/dev/null || true)
          if [[ -n "${BUILDS}" ]]; then
            echo "‚ö†Ô∏è  Found existing builds in progress: ${BUILDS}"
            echo "üìã Build details:"
            for BUILD in ${BUILDS}; do
              gcloud builds describe ${BUILD} --region=${REGION} --format="table[no-heading](id, status, createTime, logUrl)" || true
            done

            echo "üõë Cancelling stuck builds..."
            for BUILD in ${BUILDS}; do
              echo "Cancelling build: ${BUILD}"
              if gcloud builds cancel ${BUILD} --region=${REGION} --quiet; then
                echo "‚úÖ Successfully cancelled ${BUILD}"
              else
                echo "‚ö†Ô∏è  Failed to cancel ${BUILD}"
              fi
            done
            echo "‚è≥ Waiting for builds to be cancelled..."
            sleep 60
          else
            echo "‚úÖ No active builds found"
          fi

          # Check Cloud Function status
          FUNCTION_STATUS=$(gcloud functions describe ${NAME} --region=${REGION} --format="value(state)" 2>/dev/null || echo "NOT_FOUND")
          if [[ "${FUNCTION_STATUS}" != "ACTIVE" && "${FUNCTION_STATUS}" != "NOT_FOUND" ]]; then
            echo "‚ö†Ô∏è  Cloud Function is in ${FUNCTION_STATUS} state"
            echo "üîÑ Attempting to force redeployment..."
            # Try to delete the function if it's stuck
            if gcloud functions delete ${NAME} --region=${REGION} --quiet; then
              echo "‚úÖ Function deleted successfully"
              echo "‚è≥ Waiting for function deletion to complete..."
              sleep 30
            else
              echo "‚ö†Ô∏è  Failed to delete function. You may need to delete it manually from the Cloud Console."
            fi
          fi

          echo "‚úÖ Deployment conflict check complete"

      - name: Deploy Cloud Function (Gen2)
        id: deploy
        run: |
          set -euo pipefail
          RUNTIME=python311
          ENTRY_POINT=pg_query_output_to_gsheet
          REGION=${GCP_REGION:-us-central1}
          NAME=${FUNCTION_NAME:-pg_query_output_to_gsheet}

          DEPLOY_ARGS=(
            --gen2
            --runtime=${RUNTIME}
            --region=${REGION}
            --entry-point=${ENTRY_POINT}
            --source=cloud_function
            --trigger-http
          )

          if [[ "${ALLOW_UNAUTHENTICATED:-false}" == "true" ]]; then
            DEPLOY_ARGS+=(--allow-unauthenticated)
          fi

          if [[ -n "${SECRET_NEON_DATABASE_URL:-}" ]]; then
            DEPLOY_ARGS+=(--set-secrets=NEON_DATABASE_URL=${SECRET_NEON_DATABASE_URL}:latest)
          elif [[ -n "${NEON_DATABASE_URL:-}" ]]; then
            DEPLOY_ARGS+=(--set-env-vars=NEON_DATABASE_URL=${NEON_DATABASE_URL})
          fi

          if [[ -n "${SECRET_PUBLIC_TRIGGER_TOKEN:-}" ]]; then
            DEPLOY_ARGS+=(--set-secrets=PUBLIC_TRIGGER_TOKEN=${SECRET_PUBLIC_TRIGGER_TOKEN}:latest)
          fi

          # Retry deployment up to 3 times with exponential backoff
          MAX_RETRIES=3
          BASE_RETRY_DELAY=30

          for i in $(seq 1 $MAX_RETRIES); do
            echo "üöÄ Deployment attempt $i/$MAX_RETRIES"

            if gcloud functions deploy ${NAME} "${DEPLOY_ARGS[@]}"; then
              echo "‚úÖ Deployment successful on attempt $i"
              break
            else
              EXIT_CODE=$?
              echo "‚ùå Deployment failed on attempt $i (exit code: $EXIT_CODE)"

              # Handle specific error cases
              if [[ $EXIT_CODE -eq 2 ]]; then
                # Check if it's a 409 conflict or permission error
                ERROR_MSG=$(gcloud functions deploy ${NAME} "${DEPLOY_ARGS[@]}" 2>&1 | grep -i "409\|permission\|unable to queue" || true)
                if [[ -n "$ERROR_MSG" ]]; then
                  echo "üîç Error details: $ERROR_MSG"

                  if echo "$ERROR_MSG" | grep -i "409\|unable to queue" >/dev/null; then
                    echo "üîÑ 409 conflict detected - checking for stuck deployments..."
                    # Try to resolve conflicts
                    gcloud functions delete ${NAME} --region=${REGION} --quiet || true
                    echo "‚è≥ Waiting for cleanup to complete..."
                    sleep 60
                    continue
                  elif echo "$ERROR_MSG" | grep -i "permission" >/dev/null; then
                    echo "‚ö†Ô∏è  Permission error - please run ./fix-iam-permissions.sh"
                    echo "üìù This script will grant necessary permissions to ${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
                  fi
                fi
              fi

              if [[ $i -lt $MAX_RETRIES ]]; then
                DELAY=$((BASE_RETRY_DELAY * i))
                echo "‚è≥ Waiting ${DELAY} seconds before retry (exponential backoff)..."
                sleep $DELAY
              else
                echo "‚ùå All deployment attempts failed"
                echo "üí° Troubleshooting tips:"
                echo "1. Run ./check-and-fix-deployments.sh to clear stuck deployments"
                echo "2. Run ./fix-iam-permissions.sh to fix permission issues"
                echo "3. Wait 5-10 minutes before trying again"
                exit 1
              fi
            fi
          done

          # Discover URL and expose as output
          URL=$(gcloud functions describe ${NAME} --region=${REGION} --format="value(serviceConfig.uri)" || true)
          if [[ -z "${URL}" ]]; then
            # Fallback to provided secret if set
            URL=${GOOGLE_CLOUD_FUNCTION_URL:-}
            echo "Warning: Could not retrieve function URL, using fallback"
          fi
          echo "function_url=${URL}" >> $GITHUB_OUTPUT
          echo "Deployment completed. Function URL: ${URL}"
